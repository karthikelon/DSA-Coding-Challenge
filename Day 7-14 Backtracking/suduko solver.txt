import java.util.*;

public class Main {
    public static void main(String[] args) {
        int matrix[][] = {
            {3, 0, 6, 5, 0, 8, 4, 0, 0},
            {5, 2, 0, 0, 0, 0, 0, 0, 0},
            {0, 8, 7, 0, 0, 0, 0, 3, 1},
            {0, 0, 3, 0, 1, 0, 0, 8, 0},
            {9, 0, 0, 8, 6, 3, 0, 0, 5},
            {0, 5, 0, 0, 9, 0, 6, 0, 0},
            {1, 3, 0, 0, 0, 0, 2, 5, 0},
            {0, 0, 0, 0, 0, 0, 0, 7, 4},
            {0, 0, 5, 2, 0, 6, 3, 0, 0}
        };

        int fillingvalue[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};

        solveSudoku(matrix, fillingvalue);

        if (isAllFilled(matrix)) {
            System.out.println("Solved Sudoku:");
        } else {
            System.out.println("No solution exists.");
        }

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(matrix[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static boolean solveSudoku(int[][] matrix, int[] fillingvalue) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (matrix[i][j] == 0) {
                    for (int k = 0; k < fillingvalue.length; k++) {
                        if (isValid(matrix, i, j, fillingvalue[k])) {
                            matrix[i][j] = fillingvalue[k];
                            if (solveSudoku(matrix, fillingvalue)) {
                                return true;
                            } else {
                                matrix[i][j] = 0; // Backtrack
                            }
                        }
                    }
                    return false; // No valid number found, backtrack
                }
            }
        }
        return true; // Sudoku solved
    }

    public static boolean isValid(int[][] matrix, int x, int y, int num) {
        return isRowValid(matrix, x, y, num) &&
               isColValid(matrix, x, y, num) &&
               isSubMatrixValid(matrix, x, y, num);
    }

    public static boolean isColValid(int[][] matrix, int x, int y, int num) {
        for (int i = 0; i < 9; i++) {
            if (matrix[i][y] == num) {
                return false;
            }
        }
        return true;
    }

    public static boolean isRowValid(int[][] matrix, int x, int y, int num) {
        for (int i = 0; i < 9; i++) {
            if (matrix[x][i] == num) {
                return false;
            }
        }
        return true;
    }

    public static boolean isSubMatrixValid(int[][] matrix, int x, int y, int num) {
        int startX = (x / 3) * 3;
        int startY = (y / 3) * 3;
        for (int i = startX; i < startX + 3; i++) {
            for (int j = startY; j < startY + 3; j++) {
                if (matrix[i][j] == num) {
                    return false;
                }
            }
        }
        return true;
    }

    public static boolean isAllFilled(int[][] matrix) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                if (matrix[i][j] == 0) {
                    return false;
                }
            }
        }
        return true;
    }
}
