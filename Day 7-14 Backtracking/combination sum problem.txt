import java.util.*;

public class Main {
    public static void main(String[] args) {
        int[] candidates = {8, 1, 3, 7, 2, 1, 5};
        int target = 12;
        Arrays.sort(candidates); // Sort the candidates array

        List<Integer> subsol = new ArrayList<>();
        List<List<Integer>> resultantList = new ArrayList<>();
        combinationSum(candidates, target, 0, subsol, 0, resultantList);

        for (List<Integer> s : resultantList) {
            for (int x : s) {
                System.out.print(x + " ");
            }
            System.out.println();
        }
    }

    public static void combinationSum(int[] candidates, int target, int summation, List<Integer> subsol, int iterationVar, List<List<Integer>> resultantList) {
        if (iterationVar == candidates.length) {
            if (summation == target) {
                resultantList.add(new ArrayList<>(subsol)); // Add a copy of subsol to resultantList
            }
            return;
        }

        // Option 1: Exclude the current element
        combinationSum(candidates, target, summation, subsol, iterationVar + 1, resultantList);

        // Option 2: Include the current element
        if (summation + candidates[iterationVar] <= target) {
            subsol.add(candidates[iterationVar]); // Include the current element in subsol
            combinationSum(candidates, target, summation + candidates[iterationVar], subsol, iterationVar + 1, resultantList);
            subsol.remove(subsol.size() - 1); // Backtrack: remove the last added element from subsol
        }
    }
}
